hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra_plugins.hydra_ray_launcher.ray_aws_launcher.RayAWSLauncher
    env_setup:
      pip_packages:
        omegaconf: ${ray_pkg_version:omegaconf}
        hydra_core: ${ray_pkg_version:hydra}
        ray: ${ray_pkg_version:ray}
        cloudpickle: ${ray_pkg_version:cloudpickle}
        hydra_ray_launcher: 1.2.1
      commands:
      - conda create -n hydra_${python_version:micro} python=${python_version:micro}
        -y
      - echo 'export PATH="$HOME/anaconda3/envs/hydra_${python_version:micro}/bin:$PATH"'
        >> ~/.bashrc
    ray:
      init:
        address: null
      remote: {}
      cluster:
        cluster_name: default
        min_workers: 0
        upscaling_speed: 1.0
        max_workers: 1
        initial_workers: 0
        autoscaling_mode: default
        target_utilization_fraction: 0.8
        idle_timeout_minutes: 5
        docker:
          image: ''
          container_name: ''
          pull_before_run: true
          run_options: []
        provider:
          type: aws
          region: us-west-2
          availability_zone: us-west-2a,us-west-2b
          cache_stopped_nodes: false
          key_pair:
            key_name: hydra-${oc.env:USER,user}
        auth:
          ssh_user: ubuntu
        available_node_types:
          ray.head.default:
            resources: {}
            node_config:
              InstanceType: m5.large
              ImageId: ami-0a2363a9cff180a64
          ray.worker.default:
            min_workers: 0
            max_workers: 2
            resources: {}
            node_config:
              InstanceType: m5.large
              ImageId: ami-0a2363a9cff180a64
              InstanceMarketOptions:
                MarketType: spot
        head_node_type: ray.head.default
        file_mounts: {}
        initialization_commands: []
        cluster_synced_files: []
        setup_commands: []
        head_setup_commands: []
        worker_setup_commands: []
        head_start_ray_commands:
        - ray stop
        - ulimit -n 65536;ray start --head --port=6379 --object-manager-port=8076             --autoscaling-config=~/ray_bootstrap_config.yaml
        worker_start_ray_commands:
        - ray stop
        - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
      run_env: auto
    stop_cluster: true
    sync_up:
      source_dir: null
      target_dir: null
      include: []
      exclude: []
    sync_down:
      source_dir: null
      target_dir: null
      include: []
      exclude: []
    logging:
      log_style: auto
      color_mode: auto
      verbosity: 0
    create_update_cluster:
      no_restart: false
      restart_only: false
      no_config_cache: false
    teardown_cluster:
      workers_only: false
      keep_min_workers: false
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - task=1,2,3
  job:
    name: my_app
    chdir: null
    override_dirname: task=1,2,3
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/philipp/Documents/PRIVAT/Repositories/hydra-aws-example
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/philipp/Documents/PRIVAT/Repositories/hydra-aws-example/config
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: ray_aws
      hydra/output: default
  verbose: false
task: 1
